version: '3.9'
services:
 gluetun:
  image: qmcgaw/gluetun
  container_name: gluetun
  cap_add:
   - NET_ADMIN
  network_mode: "bridge"
  ports:
   - 8888:8888/tcp # HTTP proxy
   - 8388:8388/tcp # Shadowsocks
   - 8388:8388/udp # Shadowsocks
   - 8000:8000/tcp # Build-in HTTP control header
# other container ports
   - 20000:20000/tcp   # qbit webui
   - 20001:20001/tcp   # rutorrent webui
   - 50000:50000/tcp   # qbit daemon
   - 50001:50001/tcp   # rtorrent daemon
   - 2468:2468/tcp     # cross-seed
   - 2469:2469/tcp     # cross-seed-rtorrent
   - 5055:5055/tcp     # overseer
   - 6767:6767/tcp     # bazarr
   - 8001:8001/tcp     # rutorrent XMLRPC
   - 8787:8787/tcp     # readarr
   - 8989:8989/tcp     # sonarr
   - 7878:7878/tcp     # radarr
   - 8686:8686/tcp     # lidarr
   - 9117:9117/tcp     # jackett
   - 7474:7474/tcp     # autobrr
   - 8227:8227/tcp     # pyload
   - 8191:8191/tcp     # flaresolverr
   - 9000:9000/tcp     # thelounge
   - 9696:9696/tcp     # prowlarr
  volumes:
   - ./config/data_gluetun:/gluetun
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - VPN_SERVICE_PROVIDER=private internet access
   - OPENVPN_VERSION=2.5
   - OPENVPN_USER=${PIA_USER}
   - OPENVPN_PASSWORD=${PIA_PASS}
   - VPN_PORT_FORWARDING=on
   - VPN_PORT_FORWARDING_STATUS_FILE=/gluetun/forwarded_port
   - UPDATER_PERIOD=24h
   - TZ=${TZ}
   - SERVER_REGIONS=${PIA_REGION}
   - FIREWALL_OUTBOUND_SUBNETS=${NETWORK_SUBNET}/24
   - HTTPPROXY=on
   - SHADOWSOCKS=on
   - SHADOWSOCKS_PASSWORD=${SHADOW_PASS}
  restart: unless-stopped

 # A library / filter system for movies
 radarr:
  container_name: radarr
  network_mode: "service:gluetun"
  restart: unless-stopped
  volumes:
    - ./config/Radarr:/config
    - /local/path/to/Movies:/mnt/Movies
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  image: linuxserver/radarr

 # A library / filter system for books
 readarr:
  container_name: readarr
  network_mode: "service:gluetun"
  restart: unless-stopped
  volumes:
    - ./config/Readarr:/config
    - /local/path/to/Books:/mnt/Books
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  image: lscr.io/linuxserver/readarr:develop

 # A library / filter system for TV shows
 sonarr:
  container_name: sonarr
  network_mode: "service:gluetun"
  restart: unless-stopped
  volumes:
    - ./config/Sonarr:/config
    - /local/path/to/TVShows:/mnt/TVShows
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  image: linuxserver/sonarr

 # A library / filter system for music
 lidarr:
  container_name: lidarr
  network_mode: "service:gluetun"
  restart: unless-stopped
  volumes:
    - ./config/Lidarr:/config
    - /local/path/to/Music:/mnt/Music
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  image: linuxserver/lidarr

 # A tool that enables a single API to search trackers
 jackett:
  container_name: jackett
  network_mode: "service:gluetun"
  restart: unless-stopped
  volumes:
   - ./config:/config
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  image: linuxserver/jackett

 # A tool to get IRC announcements from trackers and push them to clients
 autobrr:
  container_name: autobrr
  image: ghcr.io/autobrr/autobrr:latest
  network_mode: "service:gluetun"
  restart: unless-stopped
  user: ${PUID}:${PGID}
  environment:
   - TZ=${TZ}
  volumes:
   - ./config/autobrr:/config

 # A tool that enables a single API to search trackers
 prowlarr:
  image: lscr.io/linuxserver/prowlarr:latest
  container_name: prowlarr
  network_mode: "service:gluetun"
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  volumes:
   - ./config/prowlarr:/config
  restart: unless-stopped

 # Some tracker sites can only be used (with Jackett / Prowlarr) using flaresolverr
 flaresolverr:
  image: ghcr.io/flaresolverr/flaresolverr:latest
  container_name: flaresolverr
  network_mode: "service:gluetun"
  environment:
   - LOG_LEVEL=${LOG_LEVEL:-info}
   - LOG_HTML=${LOG_HTML:-false}
   - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
   - TZ=${TZ}
  restart: unless-stopped

 # A tool that automates cross-seeding within qBittorrent
 cross-seed:
  image: crossseed/cross-seed:latest
  network_mode: "service:gluetun"
  container_name: cross-seed
  user: ${PUID}:${PGID}
  volumes:
   - ./config/cross-seed:/config
   - ./config/qBittorrent/data/BT_backup:/torrents
   - /local/path/to/downloads:/mnt/downloads
  command: daemon
  restart: unless-stopped
  depends_on:
   - qbittorrent

 # The qBittorrent client
 qbittorrent:
  image: qbittorrentofficial/qbittorrent-nox:latest
  network_mode: "service:gluetun"
  container_name: qbittorrent-nox
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
   - QBT_WEBUI_PORT=${QBT_WEBUI_PORT}
  stop_grace_period: 30m
  tmpfs:
   - /tmp
  volumes:
   - ./config:/config
   - ./config/gluetun:/config/data_gluetun
   - /local/path/to/downloads:/mnt/downloads
  restart: unless-stopped

 # Utility to automatically run a 'reannounce' job on qBittorrent (for stalled torrents)
 qbittools:
  image: registry.gitlab.com/alexkm/qbittools
  network_mode: "service:gluetun"
  container_name: qbittools
  volumes:
   - ./config/qBittorrent/config:/qBittorrent
  command: reannounce -C /qBittorrent/qBittorrent.conf
  restart: unless-stopped

 # the rtorrent client + ruTorrent web UI
 rutorrent:
  image: crazymax/rtorrent-rutorrent:latest
  container_name: rutorrent
  network_mode: "service:gluetun"
  environment:
   - XMLRPC_PORT=8001
   - WEBDAV_PORT=9001
   - RUTORRENT_PORT=20001
   - RT_INC_PORT=50001
   - PUID=${PUID}
   - PGID=${PGID}
  volumes:
   - "./config/rutorrent/data:/data"
   - "./config/rutorrent/downloads:/downloads"
   - "./config/rutorrent/passwd:/passwd"
  restart: always

 # A tool to automatically update qbittorrent with the gluetun port-forward value
 qbittorrent-port:
  image: charlocharlie/qbittorrent-port-forward-file:latest
  network_mode: "service:gluetun"
  container_name: gluetun-qbittorrent-portfw
  environment:
   - QBT_USERNAME=${QBT_USER}
   - QBT_PASSWORD=${QBT_PASS}
   - QBT_ADDR=http://localhost:${QBT_WEBUI_PORT}
   - PORT_FILE=/config/data_gluetun/forwarded_port
  volumes:
   - ./config:/config:ro
  restart: unless-stopped
  depends_on:
   - qbittorrent

 pyload-ng:
  image: lscr.io/linuxserver/pyload-ng:latest
  network_mode: "service:gluetun"
  container_name: pyload-ng
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  volumes:
   - ./config/pyload:/config
   - ./downloads:/downloads
  restart: unless-stopped

 # A system to make requests to Radarr / Sonarr etc.
 overseerr:
  image: lscr.io/linuxserver/overseerr:latest
  container_name: overseerr
  environment:
   - PUID=${PUID}
   - PGID=${PGID}
   - TZ=${TZ}
  volumes:
   - ./config/overseerr:/config

 # A web based IRC client
 thelounge:
  image: ghcr.io/thelounge/thelounge:latest
  network_mode: "service:gluetun"
  container_name: thelounge
  restart: unless-stopped
  volumes:
   - ./config/thelounge:/var/opt/thelounge

 # A discord bot, to interact with Overseerr (or Radarr / Sonarr)
 doplarr:
  image: "ghcr.io/kiranshila/doplarr:latest"
  network_mode: "service:gluetun"
  container_name: doplarr
  environment:
    - SONARR__URL=http://localhost:8989
    - RADARR__URL=http://localhost:7878
    - SONARR__API=${SONARR_API_KEY}
    - RADARR__API=${RADARR_API_KEY}
    - DISCORD__TOKEN=${DISCORD_BOT_TOKEN}
